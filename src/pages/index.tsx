import axios from "axios";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { ChangeEvent, useEffect, useState } from "react";
import { useSocketState } from "~/hooks/useSocketState";
import { api } from "~/utils/api";
import { socket } from "~/utils/socket";

export default function Home() {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const [value, setValue] = useState("");
  const [code, setCode] = useState("");
  const [messages, setMessages] = useState<string[]>([]);
  const { isConnected } = useSocketState();

  useEffect(() => {
    const socketInit = async () => {
      await axios.get("/api/socket");
      socket.connect();
    };
    socketInit().catch(console.error);

    return () => {
      socket.disconnect();
    };
  }, []);

  useEffect(() => {
    socket.on("game-update", (data) => {
      console.log("game-update", data);
      setMessages([...messages, data]);
    });
  }, [messages]);

  const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {
    setValue(event.target.value);
  };

  const onSendMessage = (value: string) => {
    socket.emit("game-update", code, value);
  };

  const handleCreateGame = () => {
    socket.emit("create-game", code);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            {isConnected ? "Connected" : "Not Connected"}
          </h1>
          <div
            className="grid grid-cols-1 gap-4 text-white sm:grid-cols-2 md:gap-8
"
          >
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {/* {hello.data ? hello.data.greeting : "Loading tRPC query..."} */}
            </p>
            {/* <AuthShowcase /> */}
          </div>
          {/* <div className="">
            <p>Join game</p>
            <input type="text" placeholder="Code" />
            <button>Join</button>
          </div> */}
          <div className="">
            <p>Create game</p>
            <input
              type="text"
              placeholder="Code"
              value={code}
              onChange={(e) => setCode(e.target.value)}
            />
            <button onClick={() => handleCreateGame()}>Create</button>
          </div>

          <div>
            <input
              type="text"
              value={value}
              onChange={(e) => onChangeHandler(e)}
            />
            <button className="" onClick={() => onSendMessage(value)}>
              SEND
            </button>
          </div>
          <div className="flex flex-col ">
            {messages.map((message, index) => (
              <div key={index}>{message}</div>
            ))}
          </div>
        </div>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
