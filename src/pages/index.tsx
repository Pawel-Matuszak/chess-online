import axios from "axios";
import Head from "next/head";
import { ChangeEvent, useEffect, useState } from "react";
import GameMenu from "~/components/GameMenu";
import { useSocketState } from "~/hooks/useSocketState";
import { setGameState, setRoomId } from "~/state/globalSlice";
import { useAppDispatch, useAppSelector } from "~/utils/hooks";
import { socket } from "~/utils/socket";

export default function Home() {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const [value, setValue] = useState("");
  const [moves, setMoves] = useState<string[]>([]);
  const { isConnected } = useSocketState();
  const [errorMsg, setErrorMsg] = useState("");
  const dispatch = useAppDispatch();
  const { roomId, gameState } = useAppSelector((state) => state.global);

  useEffect(() => {
    const socketInit = async () => {
      await axios.get("/api/socket");
      socket.connect();
      socket.on(
        "joined-game",
        ({
          status,
          message,
          id,
        }: {
          status: boolean;
          message: string;
          id: string;
        }) => {
          dispatch(setGameState("joined"));
          status && dispatch(setRoomId(id));
          setErrorMsg(!status ? message : "");
        }
      );

      socket.on("start-game", ({ status }: { status: boolean }) => {
        status && dispatch(setGameState("started"));
      });

      socket.on(
        "created-game",
        ({ status, id }: { status: boolean; id: string }) => {
          status && dispatch(setRoomId(id));
          status && dispatch(setGameState("joined"));
        }
      );
      setErrorMsg("");
    };
    socketInit().catch(console.error);

    return () => {
      socket.disconnect();
    };
  }, []);

  useEffect(() => {
    socket.on("game-update", (data) => {
      setMoves([...moves, data]);
    });
  }, [moves]);

  const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {
    setValue(event.target.value);
  };

  const onSendMessage = (value: string) => {
    socket.emit("game-update", roomId, value);
  };

  const isGameStarted = gameState === "started";

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c] font-noto-sans text-white">
        {isConnected !== "loading" && (
          <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
            <GameMenu />
            <p className="text-red-600">{errorMsg}</p>
            {isGameStarted && (
              <div>
                <input
                  className="text-black"
                  type="text"
                  value={value}
                  onChange={(e) => onChangeHandler(e)}
                  disabled={!isGameStarted}
                />
                <button className="" onClick={() => onSendMessage(value)}>
                  SEND
                </button>
              </div>
            )}
            <div className="flex flex-col">
              {moves.map((move, index) => (
                <div key={index}>{move}</div>
              ))}
            </div>
          </div>
        )}
      </main>
    </>
  );
}
