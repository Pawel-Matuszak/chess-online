import axios from "axios";
import Head from "next/head";
import { ChangeEvent, useEffect, useState } from "react";
import { useSocketState } from "~/hooks/useSocketState";
import { socket } from "~/utils/socket";

export default function Home() {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const [value, setValue] = useState("");
  const [code, setCode] = useState("");
  const [moves, setMoves] = useState<string[]>([]);
  const { isConnected } = useSocketState();
  const [errorMsg, setErrorMsg] = useState("");
  const [gameJoined, setGameJoined] = useState(false);

  useEffect(() => {
    const socketInit = async () => {
      await axios.get("/api/socket");
      socket.connect();
      socket.on(
        "joined-game",
        ({ status, message }: { status: boolean; message: string }) => {
          setGameJoined(true);
          setErrorMsg(status ? "" : message);
        }
      );

      socket.on(
        "created-game",
        ({ status, id }: { status: boolean; id: string }) => {
          status && setCode(id);
          status && setGameJoined(true);
        }
      );
    };
    socketInit().catch(console.error);

    return () => {
      socket.disconnect();
    };
  }, []);

  useEffect(() => {
    socket.on("game-update", (data) => {
      console.log("game-update", data);
      setMoves([...moves, data]);
    });
  }, [moves]);

  const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {
    setValue(event.target.value);
  };

  const onSendMessage = (value: string) => {
    socket.emit("game-update", code, value);
  };

  const onCreateGame = () => {
    socket.emit("create-game");
  };

  const onJoinGame = () => {
    socket.emit("join-game", code);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            {isConnected ? "Connected" : "Not Connected"}
          </h1>
          <div className="flex flex-col items-center justify-center">
            <button
              onClick={() => onCreateGame()}
              className="rounded-sm bg-yellow-300 p-2 font-semibold text-slate-900 "
            >
              Create game
            </button>
            {code && <div className="">Your game code is: {code}</div>}
          </div>
          <div className="">
            <p>Join game</p>
            <input
              className="text-black"
              type="text"
              placeholder="Code"
              value={code}
              onChange={(e) => setCode(e.target.value)}
            />
            <button onClick={() => onJoinGame()}>Join</button>
          </div>
          <p className="text-red-600">{errorMsg}</p>
          {gameJoined && (
            <div>
              <input
                className="text-black"
                type="text"
                value={value}
                onChange={(e) => onChangeHandler(e)}
                disabled={!gameJoined}
              />
              <button className="" onClick={() => onSendMessage(value)}>
                SEND
              </button>
            </div>
          )}
          <div className="flex flex-col">
            {moves.map((move, index) => (
              <div key={index}>{move}</div>
            ))}
          </div>
        </div>
      </main>
    </>
  );
}
